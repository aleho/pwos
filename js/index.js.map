{"version":3,"sources":["vars.js","scrollmonitor.js","database.js","pwos.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjfile":"index.js","sourcesContent":["var PWOS_VERSION = 1515081014;\nvar PWOS_DATE = '20180104_165014';\n\nif (typeof window === 'undefined') {\n    exports.PWOS_VERSION = PWOS_VERSION;\n    exports.PWOS_DATE    = PWOS_DATE;\n}\n","var ScrollMonitor = function ($element) {\n    if (!$element) {\n        return;\n    }\n\n    this.uid      = ++ScrollMonitor.uid;\n    this.$element = $element;\n};\n\nScrollMonitor.uid = 0;\nScrollMonitor.prototype.isMonitoring = false;\nScrollMonitor.prototype.uid = 0;\nScrollMonitor.prototype.$element = null;\n\n\n/**\n * Checks whether out element is visible in the viewport.\n */\nScrollMonitor.prototype._isScrolledTo = function () {\n    let anchorTop    = this.$element.offset().top;\n    let screenBottom = $(window).scrollTop() + $(window).height();\n\n    return (screenBottom > anchorTop);\n};\n\n/**\n * Starts monitoring.\n */\nScrollMonitor.prototype.start = function () {\n    if (!this.uid || this.isMonitoring) {\n        return;\n    }\n\n    this.isMonitoring = true;\n\n    $(window).on('scroll.lazyload-' + this.uid, function () {\n        if (!this._isScrolledTo(this.$element)) {\n            return;\n        }\n\n        this.stop();\n        $(window).trigger('scrolled-to', [ this.$element, this ]);\n    }.bind(this));\n};\n\n/**\n * Stops all events related to lazy loading.\n */\nScrollMonitor.prototype.stop = function () {\n    if (!this.uid || !this.isMonitoring) {\n        return;\n    }\n\n    this.isMonitoring = false;\n    $(window).off('scroll.lazyload-' + this.uid);\n};\n","var PWoSDb = (function () {\n    let Db = function (data) {\n        this.data = data;\n    };\n\n    Db.prototype.filter = function* (filter) {\n        filter = filter || {};\n\n        let fTitle = filter.title ? new RegExp(filter.title, 'i') : null;\n        let fUrl   = filter.url   ? new RegExp(filter.url, 'i')   : null;\n\n        for (let site of this.data) {\n            if (fTitle\n                && (!site.title || !site.title.match(fTitle))\n            ) {\n               continue;\n            }\n\n            if (fUrl\n                && (!site.url || !site.url.match(fUrl))\n            ) {\n               continue;\n            }\n\n            yield site;\n        }\n    };\n\n\n    let db = null;\n\n    function load(url) {\n        let deferred = $.Deferred();\n\n        if (!url) {\n            deferred.reject();\n            return deferred.promise();\n        }\n\n        $.ajax({\n            type:     'GET',\n            dataType: 'json',\n            url:      url\n\n        }).done(function (json) {\n            if (json) {\n                db = new Db(json);\n                deferred.resolve(db);\n            } else {\n                deferred.reject();\n            }\n\n        }).fail(function () {\n            db = null;\n            deferred.reject();\n        });\n\n        return deferred.promise();\n    }\n\n\n    return {\n        load: load\n    }\n})();\n","var PWoS = (function ($) {\n    const MAX_RESULTS = 30;\n\n    const MIN_LEN_BAD = 5;\n    const MAX_LEN_BAD = 16;\n\n    const DB_URL = 'data/db.json?v=' + PWOS_VERSION;\n\n    const ATTRS = [\n        'alpha', 'digit', 'space', 'special', 'case', 'changeable'\n    ];\n\n    const $list     = $('#sites-list');\n    const $template = $('#site-template tr');\n    const $filters  = $('.filter');\n\n    let db;\n    let scrollMon;\n    let filters;\n    let results;\n    let $lazyInfo;\n    let $lazySpinner;\n\n\n\n    /**\n     * Adds a row to the table.\n     */\n    function addRow(data) {\n        let $row = $template.clone().appendTo($list);;\n\n        $row.find('.title').text(data.title);\n        $row.find('a.url')\n            .text(data.url.replace(/^https?\\:\\/\\//i, ''))\n            .attr('href', data.url);\n\n        $row.find('.attr.min').text(data.pw.min).toggleClass('text-danger text-bold', data.pw.min <= MIN_LEN_BAD);\n        $row.find('.attr.max').text(data.pw.max).toggleClass('text-danger text-bold', data.pw.max <= MAX_LEN_BAD);\n\n        for (let attr of ATTRS) {\n            let $col = $row.find('.attr.' + attr);\n\n            if (!data.pw[attr]) {\n                $col.find('i.attr-false').removeClass('hidden');\n            } else {\n                $col.find('i.attr-' + data.pw[attr]).removeClass('hidden');\n            }\n        }\n    }\n\n\n    /**\n     * Filters the database using a filter input field.\n     */\n    function filter($input) {\n        let attr = $input.data('filter');\n        let val  = $input.val();\n\n        if (!attr || (val.length < 2 && val.length != 0)) {\n            return;\n        }\n\n        filters       = {};\n        filters[attr] = val;\n\n        getResults(filters);\n    }\n\n    /**\n     * Clears the table and fills it, filtering results (if passed).\n     */\n    function getResults(filter) {\n        filter  = filter || null;\n        results = db.filter(filter);\n\n        $list.empty();\n        addResults(results);\n    }\n\n    /**\n     * Appends results to the current table\n     */\n    function addResults() {\n        if (!results) {\n            return;\n        }\n\n        let site   = results.next();\n        let count  = 0;\n\n        while (site && !site.done && site.value && count < MAX_RESULTS) {\n            addRow(site.value);\n            site = results.next();\n            count++;\n        }\n\n        $lazySpinner.addClass('hidden');\n        $lazyInfo.toggleClass('invisible', site.done);\n        $lazyInfo.toggleClass('invisible', site.done);\n\n        if (!site.done) {\n            scrollMon.start();\n        } else {\n            scrollMon.stop();\n        }\n    }\n\n\n    /**\n     * Initial setup (loading, table population).\n     */\n    function init() {\n        $('#last-update').text(new Date(PWOS_VERSION * 1000));\n\n        $('.filter').keypress(function (event) {\n            if (event.which == 13) {\n                filter($(this));\n            }\n        });\n\n        $(window).on('scrolled-to', function (event, $anchor) {\n            $lazySpinner.removeClass('hidden');\n            setTimeout(function () {\n                addResults();\n            }, 10)\n        });\n\n\n        $lazyInfo    = $('#lazy-loading-info');\n        $lazySpinner = $('#lazy-loading-spinner');\n        scrollMon    = new ScrollMonitor($('#lazy-loading-anchor'));\n\n\n        PWoSDb\n            .load(DB_URL)\n            .done(function (resultDb) {\n                db = resultDb;\n                getResults();\n            })\n            .fail(function () {\n                $lazySpinner.addClass('hidden');\n                $('#content').append($('<p>').addClass('alert alert-danger').text('Failed to load database'));\n            });\n    }\n\n\n    // public interface\n    return {\n        init: init,\n\n        get db() {\n            return db;\n        }\n    };\n})(jQuery);\n"]}